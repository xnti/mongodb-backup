"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const fs_1 = require("fs");
const pkg_1 = require("pkg");
const cjs_1 = require("resedit/cjs");
// Language code for en-us and encoding codepage for UTF-16
const language = {
    lang: 1033,
    codepage: 1200 // UTF-16
};
/**
 * Build an executable
 * @param {Options} options
 * @returns An empty promise which is resolved when the executable is built
 */
function exe(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const RE = yield (0, cjs_1.load)();
        const args = [options.entry, ...(options.pkg || []), '-t', options.target || 'latest-win-x64', '-o', options.out];
        // Build w/ PKG
        yield (0, pkg_1.exec)(args);
        // Modify .exe w/ ResEdit
        const data = (0, fs_1.readFileSync)(options.out);
        const executable = RE.NtExecutable.from(data);
        const res = RE.NtExecutableResource.from(executable);
        const vi = RE.Resource.VersionInfo.fromEntries(res.entries)[0];
        // Remove original filename
        vi.removeStringValue(language, 'OriginalFilename');
        vi.removeStringValue(language, 'InternalName');
        // Product version
        if (options.version) {
            // Convert version to tuple of 3 numbers
            const version = options.version
                .split('.')
                .map(v => Number(v) || 0)
                .slice(0, 3);
            // Update versions
            vi.setProductVersion(...version, 0, language.lang);
            vi.setFileVersion(...version, 0, language.lang);
        }
        // Add additional user specified properties
        if (options.properties) {
            vi.setStringValues(language, options.properties);
        }
        vi.outputToResourceEntries(res.entries);
        // Add icon
        if (options.icon) {
            const iconFile = RE.Data.IconFile.from((0, fs_1.readFileSync)(options.icon));
            RE.Resource.IconGroupEntry.replaceIconsForResource(res.entries, 1, language.lang, iconFile.icons.map(item => item.data));
        }
        // Execution level
        const level = options.executionLevel || 'asInvoker';
        const manifest = res.getResourceEntriesAsString(24, 1)[0][1];
        res.replaceResourceEntryFromString(24, 1, language.lang, manifest.replace('asInvoker', level));
        // Regenerate and write to .exe
        res.outputResource(executable);
        (0, fs_1.writeFileSync)(options.out, Buffer.from(executable.generate()));
    });
}
module.exports = exe;
